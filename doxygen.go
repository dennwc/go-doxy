// Package doxy provides tools for parsing Doxygen XML files as generated by GENERATE_XML=YES.
package doxy

import (
	"encoding/xml"
	"os"
	"path/filepath"

	"github.com/dennwc/go-doxy/xmlfile"
	"github.com/dennwc/go-doxy/xmlindex"
)

//go:generate doxygen Doxyfile

// OpenXML opens a directory containing Doxygen XML files.
func OpenXML(dir string) (*Index, error) {
	f, err := os.Open(filepath.Join(dir, "index.xml"))
	if err != nil {
		return nil, err
	}
	defer f.Close()
	var index xmlindex.DoxygenType
	if err := xml.NewDecoder(f).Decode(&index); err != nil {
		return nil, err
	}
	idx := &Index{
		dir: dir,
		sub: make([]Entry, 0, len(index.Compound)),
	}
	for _, o := range index.Compound {
		idx.sub = append(idx.sub, Entry{
			idx:          idx,
			xmlFile:      o.Refid + ".xml",
			CompoundType: o,
		})
	}
	return idx, nil
}

// Index is a Doxygen XML directory index.
type Index struct {
	dir string
	sub []Entry
}

// Entries returns a list of top-level Doxygen entries (files, structs).
func (idx *Index) Entries() []Entry {
	return idx.sub
}

// Entry is a of top-level Doxygen entry (file, struct).
type Entry struct {
	idx     *Index
	xmlFile string
	xmlindex.CompoundType
}

// Decode decodes an entry's content.
func (f *Entry) Decode() (*xmlfile.DoxygenType, error) {
	file, err := os.Open(filepath.Join(f.idx.dir, f.xmlFile))
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var root xmlfile.DoxygenType
	if err := xml.NewDecoder(file).Decode(&root); err != nil {
		return nil, err
	}
	return &root, nil
}
